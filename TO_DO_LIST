import tkinter as tk
from tkinter import messagebox, ttk
import json
import os

class ToDoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Todo List Application")
        self.root.geometry("600x500")
        self.root.resizable(True, True)
        
        self.data_file = "todo_data.json"
        if not os.path.exists(self.data_file):
            with open(self.data_file, 'w') as f:
                json.dump([], f)
        
        self.todos = self.load_todos()
        
        self.bg_color = "#f0f0f0"
        self.primary_color = "#4a6fa5"
        self.secondary_color = "#166088"
        self.accent_color = "#4fc3f7"
        
        self.style = ttk.Style()
        self.style.configure("Treeview", 
                           background="#E1E1E1",
                           foreground="black",
                           rowheight=25,
                           fieldbackground="#E1E1E1")
        self.style.map('Treeview', background=[('selected', self.primary_color)])
        
        self.root.config(bg=self.bg_color)
        
        self.header_frame = tk.Frame(self.root, bg=self.primary_color)
        self.header_frame.pack(fill="x", padx=10, pady=5)
        
        self.title_label = tk.Label(
            self.header_frame, 
            text="My Todo List", 
            font=("Helvetica", 16, "bold"), 
            bg=self.primary_color, 
            fg="white"
        )
        self.title_label.pack(pady=10)
        
        self.input_frame = tk.Frame(self.root, bg=self.bg_color)
        self.input_frame.pack(fill="x", padx=10, pady=10)
        
        self.task_entry = tk.Entry(
            self.input_frame, 
            font=("Helvetica", 12), 
            width=40
        )
        self.task_entry.pack(side="left", padx=(0, 5))
        self.task_entry.bind("<Return>", self.add_task)
        
        self.add_button = tk.Button(
            self.input_frame, 
            text="Add Task", 
            command=self.add_task, 
            bg=self.secondary_color, 
            fg="white",
            activebackground=self.accent_color
        )
        self.add_button.pack(side="left")
    
        self.list_frame = tk.Frame(self.root)
        self.list_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        self.tree = ttk.Treeview(
            self.list_frame, 
            columns=("Status", "Task", "Date"), 
            show="headings", 
            selectmode="browse"
        )
        
        self.tree.heading("Status", text="Status")
        self.tree.heading("Task", text="Task")
        self.tree.heading("Date", text="Date Added")
        
        self.tree.column("Status", width=80, anchor="center")
        self.tree.column("Task", width=300, anchor="w")
        self.tree.column("Date", width=150, anchor="center")
        
        self.scrollbar = ttk.Scrollbar(
            self.list_frame, 
            orient="vertical", 
            command=self.tree.yview
        )
        self.tree.configure(yscrollcommand=self.scrollbar.set)
        
        self.tree.pack(side="left", fill="both", expand=True)
        self.scrollbar.pack(side="right", fill="y")
        
        self.buttons_frame = tk.Frame(self.root, bg=self.bg_color)
        self.buttons_frame.pack(fill="x", padx=10, pady=10)
        
        self.complete_button = tk.Button(
            self.buttons_frame, 
            text="Mark Complete", 
            command=self.mark_complete, 
            bg=self.secondary_color, 
            fg="white",
            activebackground=self.accent_color
        )
        self.complete_button.pack(side="left", padx=5)
        
        self.delete_button = tk.Button(
            self.buttons_frame, 
            text="Delete Task", 
            command=self.delete_task, 
            bg="#c62828", 
            fg="white",
            activebackground="#ef5350"
        )
        self.delete_button.pack(side="left", padx=5)
        
        self.clear_button = tk.Button(
            self.buttons_frame, 
            text="Clear All", 
            command=self.clear_all, 
            bg="#424242", 
            fg="white",
            activebackground="#616161"
        )
        self.clear_button.pack(side="right", padx=5)
        
        self.load_tasks()
        
        self.tree.bind("<Double-1>", self.edit_task)
        
    def load_todos(self):
        try:
            with open(self.data_file, 'r') as f:
                return json.load(f)
        except (json.JSONDecodeError, FileNotFoundError):
            return []
    
    def save_todos(self):
        with open(self.data_file, 'w') as f:
            json.dump(self.todos, f)
    
    def load_tasks(self):
        self.tree.delete(*self.tree.get_children())
        for i, todo in enumerate(self.todos):
            status = "âœ“" if todo["completed"] else ""
            self.tree.insert("", "end", values=(status, todo["task"], todo["date"]), tags=("completed" if todo["completed"] else "pending"))
    
    def add_task(self, event=None):
        task = self.task_entry.get().strip()
        if task:
            import datetime
            new_task = {
                "task": task,
                "completed": False,
                "date": datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
            }
            self.todos.append(new_task)
            self.save_todos()
            self.load_tasks()
            self.task_entry.delete(0, tk.END)
        else:
            messagebox.showwarning("Warning", "Please enter a task")
    
    def mark_complete(self):
        selected_item = self.tree.selection()
        if selected_item:
            item = self.tree.item(selected_item)
            task_index = self.tree.index(selected_item)
            
            self.todos[task_index]["completed"] = not self.todos[task_index]["completed"]
            self.save_todos()
            self.load_tasks()
    
    def delete_task(self):
        selected_item = self.tree.selection()
        if selected_item:
            if messagebox.askyesno("Confirm", "Are you sure you want to delete this task?"):
                task_index = self.tree.index(selected_item)
                del self.todos[task_index]
                self.save_todos()
                self.load_tasks()
    
    def edit_task(self, event):
        selected_item = self.tree.selection()
        if selected_item:
            item = self.tree.item(selected_item)
            task_index = self.tree.index(selected_item)
            
            edit_window = tk.Toplevel(self.root)
            edit_window.title("Edit Task")
            edit_window.geometry("400x150")
            edit_window.resizable(False, False)
            
            tk.Label(
                edit_window, 
                text="Edit Task:", 
                font=("Helvetica", 12)
            ).pack(pady=10)
            
            task_var = tk.StringVar(value=item["values"][1])
            entry = tk.Entry(
                edit_window, 
                textvariable=task_var, 
                font=("Helvetica", 12), 
                width=30
            )
            entry.pack(pady=5)
            entry.focus()
            
            def save_edit():
                self.todos[task_index]["task"] = task_var.get().strip()
                self.save_todos()
                self.load_tasks()
                edit_window.destroy()
            
            save_button = tk.Button(
                edit_window, 
                text="Save", 
                command=save_edit, 
                bg=self.secondary_color, 
                fg="white"
            )
            save_button.pack(pady=5)
            
            edit_window.bind("<Return>", lambda e: save_edit())
    
    def clear_all(self):
        if messagebox.askyesno("Confirm", "Are you sure you want to clear all tasks?"):
            self.todos = []
            self.save_todos()
            self.load_tasks()

if __name__ == "__main__":
    root = tk.Tk()
    app = ToDoApp(root)
    root.mainloop()
